package com.poochiku.suraksha.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.poochiku.suraksha.greenDao.SurakshaIncident;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SURAKSHA_INCIDENT".
*/
public class SurakshaIncidentDao extends AbstractDao<SurakshaIncident, Long> {

    public static final String TABLENAME = "SURAKSHA_INCIDENT";

    /**
     * Properties of entity SurakshaIncident.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ReportId = new Property(1, String.class, "reportId", false, "REPORT_ID");
        public final static Property SurakshaId = new Property(2, String.class, "surakshaId", false, "SURAKSHA_ID");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Latitude = new Property(4, long.class, "latitude", false, "LATITUDE");
        public final static Property CreatedDatetime = new Property(5, long.class, "createdDatetime", false, "CREATED_DATETIME");
        public final static Property Longitude = new Property(6, long.class, "longitude", false, "LONGITUDE");
        public final static Property CatName = new Property(7, String.class, "catName", false, "CAT_NAME");
        public final static Property CatType = new Property(8, String.class, "catType", false, "CAT_TYPE");
        public final static Property CatDispName = new Property(9, String.class, "catDispName", false, "CAT_DISP_NAME");
        public final static Property TagName = new Property(10, String.class, "tagName", false, "TAG_NAME");
        public final static Property TafType = new Property(11, String.class, "tafType", false, "TAF_TYPE");
        public final static Property TagDispName = new Property(12, String.class, "tagDispName", false, "TAG_DISP_NAME");
        public final static Property Desc = new Property(13, String.class, "desc", false, "DESC");
        public final static Property FileIds = new Property(14, String.class, "fileIds", false, "FILE_IDS");
    };


    public SurakshaIncidentDao(DaoConfig config) {
        super(config);
    }
    
    public SurakshaIncidentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SURAKSHA_INCIDENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REPORT_ID\" TEXT NOT NULL ," + // 1: reportId
                "\"SURAKSHA_ID\" TEXT," + // 2: surakshaId
                "\"USERNAME\" TEXT," + // 3: username
                "\"LATITUDE\" INTEGER NOT NULL ," + // 4: latitude
                "\"CREATED_DATETIME\" INTEGER NOT NULL ," + // 5: createdDatetime
                "\"LONGITUDE\" INTEGER NOT NULL ," + // 6: longitude
                "\"CAT_NAME\" TEXT NOT NULL ," + // 7: catName
                "\"CAT_TYPE\" TEXT NOT NULL ," + // 8: catType
                "\"CAT_DISP_NAME\" TEXT NOT NULL ," + // 9: catDispName
                "\"TAG_NAME\" TEXT NOT NULL ," + // 10: tagName
                "\"TAF_TYPE\" TEXT NOT NULL ," + // 11: tafType
                "\"TAG_DISP_NAME\" TEXT NOT NULL ," + // 12: tagDispName
                "\"DESC\" TEXT NOT NULL ," + // 13: desc
                "\"FILE_IDS\" TEXT);"); // 14: fileIds
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SURAKSHA_INCIDENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SurakshaIncident entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getReportId());
 
        String surakshaId = entity.getSurakshaId();
        if (surakshaId != null) {
            stmt.bindString(3, surakshaId);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
        stmt.bindLong(5, entity.getLatitude());
        stmt.bindLong(6, entity.getCreatedDatetime());
        stmt.bindLong(7, entity.getLongitude());
        stmt.bindString(8, entity.getCatName());
        stmt.bindString(9, entity.getCatType());
        stmt.bindString(10, entity.getCatDispName());
        stmt.bindString(11, entity.getTagName());
        stmt.bindString(12, entity.getTafType());
        stmt.bindString(13, entity.getTagDispName());
        stmt.bindString(14, entity.getDesc());
 
        String fileIds = entity.getFileIds();
        if (fileIds != null) {
            stmt.bindString(15, fileIds);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SurakshaIncident readEntity(Cursor cursor, int offset) {
        SurakshaIncident entity = new SurakshaIncident( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // reportId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // surakshaId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.getLong(offset + 4), // latitude
            cursor.getLong(offset + 5), // createdDatetime
            cursor.getLong(offset + 6), // longitude
            cursor.getString(offset + 7), // catName
            cursor.getString(offset + 8), // catType
            cursor.getString(offset + 9), // catDispName
            cursor.getString(offset + 10), // tagName
            cursor.getString(offset + 11), // tafType
            cursor.getString(offset + 12), // tagDispName
            cursor.getString(offset + 13), // desc
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // fileIds
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SurakshaIncident entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setReportId(cursor.getString(offset + 1));
        entity.setSurakshaId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLatitude(cursor.getLong(offset + 4));
        entity.setCreatedDatetime(cursor.getLong(offset + 5));
        entity.setLongitude(cursor.getLong(offset + 6));
        entity.setCatName(cursor.getString(offset + 7));
        entity.setCatType(cursor.getString(offset + 8));
        entity.setCatDispName(cursor.getString(offset + 9));
        entity.setTagName(cursor.getString(offset + 10));
        entity.setTafType(cursor.getString(offset + 11));
        entity.setTagDispName(cursor.getString(offset + 12));
        entity.setDesc(cursor.getString(offset + 13));
        entity.setFileIds(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SurakshaIncident entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SurakshaIncident entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
