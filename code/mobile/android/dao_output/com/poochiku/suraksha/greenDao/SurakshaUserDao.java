package com.poochiku.suraksha.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.poochiku.suraksha.greenDao.SurakshaUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SURAKSHA_USER".
*/
public class SurakshaUserDao extends AbstractDao<SurakshaUser, Long> {

    public static final String TABLENAME = "SURAKSHA_USER";

    /**
     * Properties of entity SurakshaUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FirstName = new Property(1, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(2, String.class, "lastName", false, "LAST_NAME");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property PhoneNumber = new Property(4, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property Gender = new Property(5, String.class, "gender", false, "GENDER");
        public final static Property SurakshaId = new Property(6, String.class, "surakshaId", false, "SURAKSHA_ID");
        public final static Property Password = new Property(7, String.class, "password", false, "PASSWORD");
        public final static Property Dob = new Property(8, Long.class, "dob", false, "DOB");
    };


    public SurakshaUserDao(DaoConfig config) {
        super(config);
    }
    
    public SurakshaUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SURAKSHA_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FIRST_NAME\" TEXT NOT NULL ," + // 1: firstName
                "\"LAST_NAME\" TEXT," + // 2: lastName
                "\"EMAIL\" TEXT," + // 3: email
                "\"PHONE_NUMBER\" TEXT NOT NULL ," + // 4: phoneNumber
                "\"GENDER\" TEXT NOT NULL ," + // 5: gender
                "\"SURAKSHA_ID\" TEXT NOT NULL ," + // 6: surakshaId
                "\"PASSWORD\" TEXT NOT NULL ," + // 7: password
                "\"DOB\" INTEGER);"); // 8: dob
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SURAKSHA_USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SurakshaUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFirstName());
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(3, lastName);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
        stmt.bindString(5, entity.getPhoneNumber());
        stmt.bindString(6, entity.getGender());
        stmt.bindString(7, entity.getSurakshaId());
        stmt.bindString(8, entity.getPassword());
 
        Long dob = entity.getDob();
        if (dob != null) {
            stmt.bindLong(9, dob);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SurakshaUser readEntity(Cursor cursor, int offset) {
        SurakshaUser entity = new SurakshaUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // firstName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.getString(offset + 4), // phoneNumber
            cursor.getString(offset + 5), // gender
            cursor.getString(offset + 6), // surakshaId
            cursor.getString(offset + 7), // password
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // dob
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SurakshaUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirstName(cursor.getString(offset + 1));
        entity.setLastName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhoneNumber(cursor.getString(offset + 4));
        entity.setGender(cursor.getString(offset + 5));
        entity.setSurakshaId(cursor.getString(offset + 6));
        entity.setPassword(cursor.getString(offset + 7));
        entity.setDob(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SurakshaUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SurakshaUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
